넘버링 유저 로직 
<!-- 1. insert_저장하기(회원가입하기) -->
	insertUser
		UserMapper
			parameter = UserVO userVO
		UserDAO
			parameter = UserVO userVO
		UserService
			parameter = UserVO userVO
		UserServiceImpl
			parameter = UserVO userVO
		UserController
			parameter = UserVO userVO, Model model
			model.addAttribute("vo", userVO)
			return	  = mapper.writeValueAsString(userVO)
		
<!-- 2. select_1개 얻기 -->
	selectByIdx
		UserMapper
			parameter = int user_idx
			return    = UserVO userVO
		UserDAO
			parameter = int user_idx
			return    = UserVO userVO
		UserService
			parameter = int user_idx
			return    = UserVO userVO
		UserServiceImpl
			parameter = int user_idx
			return    = UserVO userVO
		UserController
			null
		
<!-- 3. update_수정하기(회원정보수정하기) -->
	updateUser
		UserMapper
			parameter = UserVO userVO
		UserDAO
			parameter = UserVO userVO
		UserService
			parameter = UserVO userVO
		UserServiceImpl
			parameter = UserVO userVO
		UserController
				
<!-- 4. delete_삭제하기(회원탈퇴하기) -->
	deleteUser
		UserMapper
			parameter = int user_idx
		UserDAO
			parameter = int user_idx
		UserService
		UserServiceImpl
		UserController			
		
<!-- 5. select_아디 찾기 -->
	findId
		UserMapper
			null
		UserDAO
			null
		UserService
			parameter = String user_name, String user_phone
			return	  = UserVO userVO
		UserServiceImpl
		UserController	
	// selectByUsername 사용	(user_name, user_phone)
	

<!-- 6. select_비번 찾기 -->
	findPw
		UserMapper
			null
		UserDAO
			null
		UserService
			parameter = String user_id, String user_phone 
			return	  = UserVO userVO
		UserServiceImpl
		UserController
		
<!-- 7. select_아디 중복 확인_0:없음/사용가능_1:있음/사용불가 -->
	selectCountUserId
		UserMapper
			parameter = String user_id
			return	  = int count(*)	// 0: 없음/사용가능, 1: 존재/사용불가 
		UserDAO
			parameter = String user_id
			return	  = int		 		// 0: 없음/사용가능, 1: 존재/사용불가 
		UserService
		UserServiceImpl
		UserController			
		
	// Controller 단에서 idCheck 내 0, 1 리턴하여 사용
	
<!-- 8. select_이름과 전화번호로 가져오기(아디찾기 사용) -->
	selectByUsername
		UserMapper
			parameter = Hashmap<String, String> map
				// String user_name, String user_phone
			return	  = UserVO userVO
		UserDAO
			parameter = Hashmap<String, String> map
				// String user_name, String user_phone
			return	  = UserVO userVO
		UserService
		UserServiceImpl
		UserController			
		
	// Controller 단에서 findId 내 user_id 리턴하여 사용
	
<!-- 9. select_아이디와 전화번호로 가져오기(비번찾기 사용) -->
	selectByUserId
		UserMapper
			parameter = Hashmap<String, String> map 
				// String user_id, String user_phone
			return	  = UserVO userVO(추후 변동 예정)
		UserDAO
			parameter = Hashmap<String, String> map 
				// String user_id, String user_phone
			return	  = UserVO userVO(추후 변동 예정)			
		UserService
		UserServiceImpl
		UserController			
			
			
	// Controller 단에서 findPw 내 user_bCrypt 적용 및 임시 비번 사용할 예정
	
<!-- 10. update_유저 벤 하기 -->
	BannedUser
		UserMapper
			parameter = Hashmap<String, Integer> map 
				// int user_banned, int user_idx 
			return	  = map {user_idx=2, user_banned=0}
		UserDAO
			parameter = Hashmap<String, Integer> map 
				// int user_banned, int user_idx 
		UserService
		UserServiceImpl
		UserController
					
<!-- 11. update_비밀번호 변경하기 -->
	updatePassword
		UserMapper
			parameter = Hashmap<String, String> map
				 // String user_password, String user_id
			return	  = map {user_idx=2, user_banned=0}
		UserDAO
			parameter = Hashmap<String, String> map
				 // String user_password, String user_id
			return	  = map {user_idx=2, user_banned=0}
		UserService
		UserServiceImpl
		UserController			
			
<!-- 12. ID로 가져오기 -->
	selectUserId	
		UserMapper
			parameter = String user_id 
			return	  = UserVO userVO
		UserDAO
			parameter = String user_id 
			return	  = UserVO userVO
		UserService
			parameter = String user_id 
			return	  = UserVO userVO
		UserServiceImpl
			parameter = String user_id 
			return	  = UserVO userVO
		UserController
			null
	//	
	
	
	