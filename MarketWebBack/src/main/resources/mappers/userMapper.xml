<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.green.sga.dao.UserDAO">

	<!-- 00. getUserVO -->
	<select id="getUser" resultType="UserVO"> 
		select * from user where user_id = #{user_id } and user_password = #{user_password}
	</select>
	
	<!-- 01. insert_저장하기(회원가입하기) -->
	<insert id="insertUser" parameterType="UserVO">
		INSERT into user(
		user_id,
		user_password,
		user_name,
		user_birth,
		user_email,
		user_phone,
		userCol1,
		userCol2
		)
		values(
		#{user_id },
		#{user_password },
		#{user_name },
		#{user_birth },
		#{user_email },
		#{user_phone },
		'',
		''
		)
	</insert>

	<!-- 02. select_1개 얻기 -->
	<select id="selectByIdx" parameterType="int" resultType="UserVO">
		select * from user where user_idx=#{user_idx}
	</select>

	<!-- 03. update_수정하기(회원정보수정하기) -->
	<update id="updateUser" parameterType="UserVO">
		UPDATE `user` SET
			user_password = #{user_password},
			user_phone = #{user_phone },
			user_email = #{user_email }
		WHERE
			user_id = #{user_id }
	</update>

	<!-- 04. delete_삭제하기(회원탈퇴하기) -->
	<delete id="deleteUser" parameterType="int">
		delete from user
		where
		user_idx=#{user_idx }
	</delete>

<!-- ============================================================== --> 

	<!-- 07. select_아디 중복 확인 0:없음_사용가능 1:있음_사용불가 -->
	<!-- idCheck 처리시 호출될 쿼리 -->
	<select id="selectCountUserId" parameterType="String" resultType="int">
		select count(*) from user where user_id=#{user_id}
	</select>

	<!-- 08. select_이름과 전화번호로 가져오기(아이디찾기 사용) -->
	<!-- findId 처리시 호출될 쿼리 -->
	<select id="selectByUsername" parameterType="hashmap" resultType="UserVO">
		select * from user where user_name=#{user_name} and user_email=#{user_email}
	</select>

	<!-- 09. select_아이디와 전화번호로 가져오기(비번찾기 사용) -->
	<!-- findPw 처리시 호출될 쿼리 -->
	<select id="selectByUserId" parameterType="hashmap" resultType="UserVO">
		select * from user where user_id=#{user_id} and user_email=#{user_email} and user_name=#{user_name}
	</select>

<!-- ============================================================== --> 

	<!-- 10. update_유저 벤 하기 -->
	<update id="BannedUser" parameterType="hashmap">
		update user set user_banned=#{user_banned} where user_idx=#{user_idx}
	</update>

	<!-- 11. update_비밀번호 변경하기 -->
	<update id="updatePassword" parameterType="hashmap">
		update user set user_password=#{user_password} where user_id=#{user_id}
	</update>

	<!-- 12. ID로 가져오기 -->
	<select id="selectUserId" parameterType="string" resultType="UserVO">
		select * from user where user_id=#{user_id}
	</select>

<!-- ============================================================== --> 

	<!-- 53. 이름, 이메일로 VO 가져오기 -->
	<select id="selectByUserNameEmail" parameterType="Hashmap" resultType="UserVO">
		select * from user where user_name=#{user_name} and user_email=#{user_email}
	</select>

	<!-- 54. 이름, 아디, 이메일로 VO 가져오기 -->
	<select id="selectCountUserIdNameEmail" parameterType="Hashmap" resultType="int">
		select count(*) from user where user_id=#{user_id} and user_email=#{user_email} and user_name=#{user_name}
	</select>

	<!-- 55. select_CheckPassword 비밀번호 일치 여부 확인하기 -->
	<select id="countCheckPassword" parameterType="Hashmap" resultType="int">
		SELECT count(*) from user WHERE user_id=#{user_id} and user_password=#{user_password}
	</select>
		
	<!-- 나의 판매 -->
	<select id="showMyBoard" parameterType="int" resultType="BoardVO">
		select * FROM board
		WHERE 
		user_idx = #{user_idx}
		order by board_regDate DESC
	</select>
	
	<!-- 나의 댓글 -->
	<select id="showMyReply" parameterType="String" resultType="replyVO">
		select * from reply
		WHERE 
		user_id = #{user_id}
		order by reply_regDate desc
	</select>
	
	
	
</mapper>

